{
  "{\"sourceRoot\":\"C:\\\\Users\\\\ledlo\\\\OneDrive\\\\FreeCodeCamp\\\\QualityAssurance\\\\Projects\\\\SudokuSolver\\\\routes\\\\\",\"caller\":{\"name\":\"@babel/register\"},\"cwd\":\"C:\\\\Users\\\\ledlo\\\\OneDrive\\\\FreeCodeCamp\\\\QualityAssurance\\\\Projects\\\\SudokuSolver\",\"filename\":\"C:\\\\Users\\\\ledlo\\\\OneDrive\\\\FreeCodeCamp\\\\QualityAssurance\\\\Projects\\\\SudokuSolver\\\\routes\\\\api.js\",\"cloneInputAst\":true,\"babelrc\":false,\"configFile\":false,\"passPerPreset\":false,\"envName\":\"test\",\"root\":\"C:\\\\Users\\\\ledlo\\\\OneDrive\\\\FreeCodeCamp\\\\QualityAssurance\\\\Projects\\\\SudokuSolver\",\"plugins\":[{\"key\":\"proposal-numeric-separator\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"NumericLiteral\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-logical-assignment-operators\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"AssignmentExpression\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-nullish-coalescing-operator\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"LogicalExpression\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-optional-chaining\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"OptionalCallExpression\":{\"enter\":[null]},\"OptionalMemberExpression\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-json-strings\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"DirectiveLiteral\":{\"enter\":[null]},\"StringLiteral\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-optional-catch-binding\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"CatchClause\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-parameters\",\"visitor\":{\"_exploded\":true,\"_verified\":true,\"FunctionDeclaration\":{\"enter\":[null]},\"FunctionExpression\":{\"enter\":[null]},\"ObjectMethod\":{\"enter\":[null]},\"ArrowFunctionExpression\":{\"enter\":[null]},\"ClassMethod\":{\"enter\":[null]},\"ClassPrivateMethod\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-async-generator-functions\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"Program\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-object-rest-spread\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"VariableDeclarator\":{\"enter\":[null]},\"ExportNamedDeclaration\":{\"enter\":[null]},\"CatchClause\":{\"enter\":[null]},\"AssignmentExpression\":{\"enter\":[null]},\"ArrayPattern\":{\"enter\":[null]},\"ObjectExpression\":{\"enter\":[null]},\"FunctionDeclaration\":{\"enter\":[null]},\"FunctionExpression\":{\"enter\":[null]},\"ObjectMethod\":{\"enter\":[null]},\"ArrowFunctionExpression\":{\"enter\":[null]},\"ClassMethod\":{\"enter\":[null]},\"ClassPrivateMethod\":{\"enter\":[null]},\"ForInStatement\":{\"enter\":[null]},\"ForOfStatement\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-dotall-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-unicode-property-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-named-capturing-groups-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-async-to-generator\",\"visitor\":{\"_exploded\":true,\"_verified\":true,\"FunctionDeclaration\":{\"enter\":[null]},\"FunctionExpression\":{\"enter\":[null]},\"ObjectMethod\":{\"enter\":[null]},\"ArrowFunctionExpression\":{\"enter\":[null]},\"ClassMethod\":{\"enter\":[null]},\"ClassPrivateMethod\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-exponentiation-operator\",\"visitor\":{\"AssignmentExpression\":{\"enter\":[null]},\"BinaryExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-template-literals\",\"visitor\":{\"TaggedTemplateExpression\":{\"enter\":[null]},\"TemplateLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-literals\",\"visitor\":{\"NumericLiteral\":{\"enter\":[null]},\"StringLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-function-name\",\"visitor\":{\"FunctionExpression\":{\"exit\":[null]},\"ObjectProperty\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-arrow-functions\",\"visitor\":{\"ArrowFunctionExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-block-scoped-functions\",\"visitor\":{\"BlockStatement\":{\"enter\":[null]},\"SwitchCase\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-classes\",\"visitor\":{\"ExportDefaultDeclaration\":{\"enter\":[null]},\"ClassDeclaration\":{\"enter\":[null]},\"ClassExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-object-super\",\"visitor\":{\"ObjectExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-shorthand-properties\",\"visitor\":{\"ObjectMethod\":{\"enter\":[null]},\"ObjectProperty\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-duplicate-keys\",\"visitor\":{\"ObjectExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-computed-properties\",\"visitor\":{\"ObjectExpression\":{\"exit\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-for-of\",\"visitor\":{\"ForOfStatement\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-sticky-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-unicode-escapes\",\"visitor\":{\"Identifier\":{\"enter\":[null]},\"TemplateElement\":{\"enter\":[null]},\"_exploded\":true,\"StringLiteral\":{\"enter\":[null]},\"DirectiveLiteral\":{\"enter\":[null]},\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-unicode-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-spread\",\"visitor\":{\"ArrayExpression\":{\"enter\":[null]},\"CallExpression\":{\"enter\":[null]},\"NewExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-destructuring\",\"visitor\":{\"ExportNamedDeclaration\":{\"enter\":[null]},\"CatchClause\":{\"enter\":[null]},\"AssignmentExpression\":{\"enter\":[null]},\"VariableDeclaration\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true,\"ForInStatement\":{\"enter\":[null]},\"ForOfStatement\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-block-scoping\",\"visitor\":{\"VariableDeclaration\":{\"enter\":[null]},\"CatchClause\":{\"enter\":[null]},\"_exploded\":true,\"BlockStatement\":{\"enter\":[null]},\"SwitchStatement\":{\"enter\":[null]},\"Program\":{\"enter\":[null]},\"_verified\":true,\"DoWhileStatement\":{\"enter\":[null]},\"ForInStatement\":{\"enter\":[null]},\"ForStatement\":{\"enter\":[null]},\"WhileStatement\":{\"enter\":[null]},\"ForOfStatement\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-typeof-symbol\",\"visitor\":{\"UnaryExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true,\"BlockStatement\":{\"enter\":[null]},\"CatchClause\":{\"enter\":[null]},\"DoWhileStatement\":{\"enter\":[null]},\"ForInStatement\":{\"enter\":[null]},\"ForStatement\":{\"enter\":[null]},\"FunctionDeclaration\":{\"enter\":[null]},\"FunctionExpression\":{\"enter\":[null]},\"Program\":{\"enter\":[null]},\"ObjectMethod\":{\"enter\":[null]},\"SwitchStatement\":{\"enter\":[null]},\"WhileStatement\":{\"enter\":[null]},\"ArrowFunctionExpression\":{\"enter\":[null]},\"ClassExpression\":{\"enter\":[null]},\"ClassDeclaration\":{\"enter\":[null]},\"ForOfStatement\":{\"enter\":[null]},\"ClassMethod\":{\"enter\":[null]},\"ClassPrivateMethod\":{\"enter\":[null]},\"TSModuleBlock\":{\"enter\":[null]},\"AssignmentPattern\":{\"enter\":[null]},\"ArrayPattern\":{\"enter\":[null]},\"ObjectPattern\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-new-target\",\"visitor\":{\"MetaProperty\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"regenerator-transform\",\"visitor\":{\"_exploded\":true,\"_verified\":true,\"ObjectMethod\":{\"enter\":[null],\"exit\":[null]},\"ClassMethod\":{\"enter\":[null],\"exit\":[null]},\"ClassPrivateMethod\":{\"enter\":[null],\"exit\":[null]},\"FunctionDeclaration\":{\"exit\":[null]},\"FunctionExpression\":{\"exit\":[null]},\"ArrowFunctionExpression\":{\"exit\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-member-expression-literals\",\"visitor\":{\"MemberExpression\":{\"exit\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-property-literals\",\"visitor\":{\"ObjectProperty\":{\"exit\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-reserved-words\",\"visitor\":{\"_exploded\":true,\"_verified\":true,\"Identifier\":{\"enter\":[null,null]},\"JSXIdentifier\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-export-namespace-from\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"ExportNamedDeclaration\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-modules-commonjs\",\"visitor\":{\"CallExpression\":{\"enter\":[null]},\"Program\":{\"exit\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-dynamic-import\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"Program\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}}],\"presets\":[]}:7.11.6:test": {
    "metadata": {},
    "options": {
      "sourceRoot": "C:\\Users\\ledlo\\OneDrive\\FreeCodeCamp\\QualityAssurance\\Projects\\SudokuSolver\\routes\\",
      "caller": {
        "name": "@babel/register"
      },
      "cwd": "C:\\Users\\ledlo\\OneDrive\\FreeCodeCamp\\QualityAssurance\\Projects\\SudokuSolver",
      "filename": "C:\\Users\\ledlo\\OneDrive\\FreeCodeCamp\\QualityAssurance\\Projects\\SudokuSolver\\routes\\api.js",
      "cloneInputAst": true,
      "babelrc": false,
      "configFile": false,
      "envName": "test",
      "root": "C:\\Users\\ledlo\\OneDrive\\FreeCodeCamp\\QualityAssurance\\Projects\\SudokuSolver",
      "sourceMaps": "both",
      "ast": false,
      "passPerPreset": false,
      "plugins": [
        {
          "key": "proposal-numeric-separator",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "NumericLiteral": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-logical-assignment-operators",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "AssignmentExpression": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-nullish-coalescing-operator",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "LogicalExpression": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-optional-chaining",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "OptionalCallExpression": {
              "enter": [
                null
              ]
            },
            "OptionalMemberExpression": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-json-strings",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "DirectiveLiteral": {
              "enter": [
                null
              ]
            },
            "StringLiteral": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-optional-catch-binding",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "CatchClause": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-parameters",
          "visitor": {
            "_exploded": true,
            "_verified": true,
            "FunctionDeclaration": {
              "enter": [
                null
              ]
            },
            "FunctionExpression": {
              "enter": [
                null
              ]
            },
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "ClassMethod": {
              "enter": [
                null
              ]
            },
            "ClassPrivateMethod": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-async-generator-functions",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "Program": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-object-rest-spread",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "VariableDeclarator": {
              "enter": [
                null
              ]
            },
            "ExportNamedDeclaration": {
              "enter": [
                null
              ]
            },
            "CatchClause": {
              "enter": [
                null
              ]
            },
            "AssignmentExpression": {
              "enter": [
                null
              ]
            },
            "ArrayPattern": {
              "enter": [
                null
              ]
            },
            "ObjectExpression": {
              "enter": [
                null
              ]
            },
            "FunctionDeclaration": {
              "enter": [
                null
              ]
            },
            "FunctionExpression": {
              "enter": [
                null
              ]
            },
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "ClassMethod": {
              "enter": [
                null
              ]
            },
            "ClassPrivateMethod": {
              "enter": [
                null
              ]
            },
            "ForInStatement": {
              "enter": [
                null
              ]
            },
            "ForOfStatement": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-dotall-regex",
          "visitor": {
            "RegExpLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-unicode-property-regex",
          "visitor": {
            "RegExpLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-named-capturing-groups-regex",
          "visitor": {
            "RegExpLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-async-to-generator",
          "visitor": {
            "_exploded": true,
            "_verified": true,
            "FunctionDeclaration": {
              "enter": [
                null
              ]
            },
            "FunctionExpression": {
              "enter": [
                null
              ]
            },
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "ClassMethod": {
              "enter": [
                null
              ]
            },
            "ClassPrivateMethod": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-exponentiation-operator",
          "visitor": {
            "AssignmentExpression": {
              "enter": [
                null
              ]
            },
            "BinaryExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-template-literals",
          "visitor": {
            "TaggedTemplateExpression": {
              "enter": [
                null
              ]
            },
            "TemplateLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-literals",
          "visitor": {
            "NumericLiteral": {
              "enter": [
                null
              ]
            },
            "StringLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-function-name",
          "visitor": {
            "FunctionExpression": {
              "exit": [
                null
              ]
            },
            "ObjectProperty": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-arrow-functions",
          "visitor": {
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-block-scoped-functions",
          "visitor": {
            "BlockStatement": {
              "enter": [
                null
              ]
            },
            "SwitchCase": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-classes",
          "visitor": {
            "ExportDefaultDeclaration": {
              "enter": [
                null
              ]
            },
            "ClassDeclaration": {
              "enter": [
                null
              ]
            },
            "ClassExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-object-super",
          "visitor": {
            "ObjectExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-shorthand-properties",
          "visitor": {
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "ObjectProperty": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-duplicate-keys",
          "visitor": {
            "ObjectExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-computed-properties",
          "visitor": {
            "ObjectExpression": {
              "exit": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-for-of",
          "visitor": {
            "ForOfStatement": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-sticky-regex",
          "visitor": {
            "RegExpLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-unicode-escapes",
          "visitor": {
            "Identifier": {
              "enter": [
                null
              ]
            },
            "TemplateElement": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "StringLiteral": {
              "enter": [
                null
              ]
            },
            "DirectiveLiteral": {
              "enter": [
                null
              ]
            },
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-unicode-regex",
          "visitor": {
            "RegExpLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-spread",
          "visitor": {
            "ArrayExpression": {
              "enter": [
                null
              ]
            },
            "CallExpression": {
              "enter": [
                null
              ]
            },
            "NewExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-destructuring",
          "visitor": {
            "ExportNamedDeclaration": {
              "enter": [
                null
              ]
            },
            "CatchClause": {
              "enter": [
                null
              ]
            },
            "AssignmentExpression": {
              "enter": [
                null
              ]
            },
            "VariableDeclaration": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true,
            "ForInStatement": {
              "enter": [
                null
              ]
            },
            "ForOfStatement": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-block-scoping",
          "visitor": {
            "VariableDeclaration": {
              "enter": [
                null
              ]
            },
            "CatchClause": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "BlockStatement": {
              "enter": [
                null
              ]
            },
            "SwitchStatement": {
              "enter": [
                null
              ]
            },
            "Program": {
              "enter": [
                null
              ]
            },
            "_verified": true,
            "DoWhileStatement": {
              "enter": [
                null
              ]
            },
            "ForInStatement": {
              "enter": [
                null
              ]
            },
            "ForStatement": {
              "enter": [
                null
              ]
            },
            "WhileStatement": {
              "enter": [
                null
              ]
            },
            "ForOfStatement": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-typeof-symbol",
          "visitor": {
            "UnaryExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true,
            "BlockStatement": {
              "enter": [
                null
              ]
            },
            "CatchClause": {
              "enter": [
                null
              ]
            },
            "DoWhileStatement": {
              "enter": [
                null
              ]
            },
            "ForInStatement": {
              "enter": [
                null
              ]
            },
            "ForStatement": {
              "enter": [
                null
              ]
            },
            "FunctionDeclaration": {
              "enter": [
                null
              ]
            },
            "FunctionExpression": {
              "enter": [
                null
              ]
            },
            "Program": {
              "enter": [
                null
              ]
            },
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "SwitchStatement": {
              "enter": [
                null
              ]
            },
            "WhileStatement": {
              "enter": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "ClassExpression": {
              "enter": [
                null
              ]
            },
            "ClassDeclaration": {
              "enter": [
                null
              ]
            },
            "ForOfStatement": {
              "enter": [
                null
              ]
            },
            "ClassMethod": {
              "enter": [
                null
              ]
            },
            "ClassPrivateMethod": {
              "enter": [
                null
              ]
            },
            "TSModuleBlock": {
              "enter": [
                null
              ]
            },
            "AssignmentPattern": {
              "enter": [
                null
              ]
            },
            "ArrayPattern": {
              "enter": [
                null
              ]
            },
            "ObjectPattern": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-new-target",
          "visitor": {
            "MetaProperty": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "regenerator-transform",
          "visitor": {
            "_exploded": true,
            "_verified": true,
            "ObjectMethod": {
              "enter": [
                null
              ],
              "exit": [
                null
              ]
            },
            "ClassMethod": {
              "enter": [
                null
              ],
              "exit": [
                null
              ]
            },
            "ClassPrivateMethod": {
              "enter": [
                null
              ],
              "exit": [
                null
              ]
            },
            "FunctionDeclaration": {
              "exit": [
                null
              ]
            },
            "FunctionExpression": {
              "exit": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "exit": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-member-expression-literals",
          "visitor": {
            "MemberExpression": {
              "exit": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-property-literals",
          "visitor": {
            "ObjectProperty": {
              "exit": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-reserved-words",
          "visitor": {
            "_exploded": true,
            "_verified": true,
            "Identifier": {
              "enter": [
                null,
                null
              ]
            },
            "JSXIdentifier": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-export-namespace-from",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "ExportNamedDeclaration": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-modules-commonjs",
          "visitor": {
            "CallExpression": {
              "enter": [
                null
              ]
            },
            "Program": {
              "exit": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-dynamic-import",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "Program": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        }
      ],
      "presets": [],
      "parserOpts": {
        "sourceType": "module",
        "sourceFileName": "C:\\Users\\ledlo\\OneDrive\\FreeCodeCamp\\QualityAssurance\\Projects\\SudokuSolver\\routes\\api.js",
        "plugins": [
          "numericSeparator",
          "logicalAssignment",
          "nullishCoalescingOperator",
          "optionalChaining",
          "jsonStrings",
          "optionalCatchBinding",
          "asyncGenerators",
          "objectRestSpread",
          "exportNamespaceFrom",
          "dynamicImport"
        ]
      },
      "generatorOpts": {
        "filename": "C:\\Users\\ledlo\\OneDrive\\FreeCodeCamp\\QualityAssurance\\Projects\\SudokuSolver\\routes\\api.js",
        "comments": true,
        "compact": "auto",
        "sourceMaps": "both",
        "sourceRoot": "C:\\Users\\ledlo\\OneDrive\\FreeCodeCamp\\QualityAssurance\\Projects\\SudokuSolver\\routes\\",
        "sourceFileName": "api.js"
      }
    },
    "ast": null,
    "code": "'use strict';\n\nvar SudokuSolver = require('../controllers/sudoku-solver.js');\n\nmodule.exports = function (app) {\n  var solver = new SudokuSolver();\n  app.route('/api/check').post(function (req, res) {\n    //Get data from req.body\n    var _req$body = req.body,\n        puzzle = _req$body.puzzle,\n        coordinate = _req$body.coordinate,\n        value = _req$body.value; //If any data is falsey return error\n\n    if (!puzzle || !coordinate || !value) {\n      return res.json({\n        error: \"Required field(s) missing\"\n      });\n    } //Get row and column from coordinates\n\n\n    var row = coordinate.split(\"\")[0];\n    var column = coordinate.split(\"\")[1]; //If coordinate is longer than 2 characters\n    //Row contain a letter different to a-i\n    //Column contain a number different to 1-9\n    //return error\n\n    if (coordinate.length !== 2 || !/[a-i]/i.test(row) || !/[1-9]/i.test(column)) {\n      return res.json({\n        error: \"Invalid coordinate\"\n      });\n    } //If value is longer than 1 character or contains a number different to 1-9 return error\n\n\n    if (!/[1-9]/.test(value) || value.length != 1) {\n      return res.json({\n        error: \"Invalid value\"\n      });\n    } //Validate Puzzle\n\n\n    var validatedPuzzle = solver.validate(puzzle);\n\n    if (validatedPuzzle != true) {\n      return res.json(validatedPuzzle);\n    } //Check rows, cols and regions\n\n\n    var validCol = solver.checkColPlacement(puzzle, row, column, value);\n    var validRow = solver.checkRowPlacement(puzzle, row, column, value);\n    var validRegion = solver.checkRegionPlacement(puzzle, row, column, value);\n    var conflicts = []; //If rows, cols and regions are true return valid\n\n    if (validCol && validRow && validRegion) {\n      return res.json({\n        valid: true\n      });\n    } else {\n      //If not insert in conflicts the ones that return false\n      if (!validCol) conflicts.push('column');\n      if (!validRow) conflicts.push('row');\n      if (!validRegion) conflicts.push('region'); //Return conflicts\n\n      return res.json({\n        valid: false,\n        conflict: conflicts\n      });\n    }\n  });\n  app.route('/api/solve').post(function (req, res) {\n    //Get puzzle from req.bocy\n    var puzzle = req.body.puzzle; //Validate Puzzle\n\n    var validatedString = solver.validate(puzzle); //If validatedString is true the puzzle is worthy\n\n    if (validatedString != true) {\n      //If not return the error\n      return res.json(validatedString);\n    } //Solve puzzle\n\n\n    var solvedString = solver.solve(puzzle); //If solvedString returns false\n\n    if (!solvedString) {\n      return res.json({\n        error: \"Puzzle cannot be solved\"\n      });\n    } else {\n      //If solvedString returns a string\n      return res.json({\n        solution: solvedString\n      });\n    }\n  });\n};\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,",
    "map": {
      "version": 3,
      "sources": [
        "api.js"
      ],
      "names": [
        "SudokuSolver",
        "require",
        "module",
        "exports",
        "app",
        "solver",
        "route",
        "post",
        "req",
        "res",
        "body",
        "puzzle",
        "coordinate",
        "value",
        "json",
        "error",
        "row",
        "split",
        "column",
        "length",
        "test",
        "validatedPuzzle",
        "validate",
        "validCol",
        "checkColPlacement",
        "validRow",
        "checkRowPlacement",
        "validRegion",
        "checkRegionPlacement",
        "conflicts",
        "valid",
        "push",
        "conflict",
        "validatedString",
        "solvedString",
        "solve",
        "solution"
      ],
      "mappings": "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",
      "sourceRoot": "C:\\Users\\ledlo\\OneDrive\\FreeCodeCamp\\QualityAssurance\\Projects\\SudokuSolver\\routes\\",
      "sourcesContent": [
        "'use strict';\r\n\r\nconst SudokuSolver = require('../controllers/sudoku-solver.js');\r\n\r\nmodule.exports = function (app) {\r\n  \r\n  let solver = new SudokuSolver();\r\n\r\n  app.route('/api/check')\r\n    .post((req, res) => {\r\n      //Get data from req.body\r\n      const {puzzle, coordinate, value} = req.body;\r\n      //If any data is falsey return error\r\n      if (!puzzle || !coordinate || !value){\r\n        return res.json({error: \"Required field(s) missing\"});\r\n      }\r\n      //Get row and column from coordinates\r\n      const row = coordinate.split(\"\")[0];\r\n      const column = coordinate.split(\"\")[1];\r\n      //If coordinate is longer than 2 characters\r\n      //Row contain a letter different to a-i\r\n      //Column contain a number different to 1-9\r\n      //return error\r\n      if(coordinate.length !== 2 || !/[a-i]/i.test(row) || !/[1-9]/i.test(column)){\r\n        return res.json({error: \"Invalid coordinate\"});\r\n      }\r\n      //If value is longer than 1 character or contains a number different to 1-9 return error\r\n      if(!/[1-9]/.test(value) || value.length != 1){\r\n        return res.json({error: \"Invalid value\"});\r\n      }\r\n      \r\n      //Validate Puzzle\r\n      let validatedPuzzle = solver.validate(puzzle);\r\n      if(validatedPuzzle != true){\r\n        return res.json(validatedPuzzle);\r\n      }\r\n\r\n      //Check rows, cols and regions\r\n      let validCol = solver.checkColPlacement(puzzle, row, column, value);\r\n      let validRow = solver.checkRowPlacement(puzzle, row, column, value);\r\n      let validRegion = solver.checkRegionPlacement(puzzle, row, column, value);\r\n      let conflicts = [];\r\n      //If rows, cols and regions are true return valid\r\n      if(validCol && validRow && validRegion){\r\n        return res.json({valid: true});\r\n      } else {\r\n        //If not insert in conflicts the ones that return false\r\n        if (!validCol) conflicts.push('column');\r\n        if (!validRow) conflicts.push('row');\r\n        if (!validRegion) conflicts.push('region')\r\n        //Return conflicts\r\n        return res.json({valid: false, conflict: conflicts});\r\n      }\r\n\r\n    });\r\n    \r\n  app.route('/api/solve')\r\n    .post((req, res) => {\r\n      //Get puzzle from req.bocy\r\n      const { puzzle } = req.body;\r\n      //Validate Puzzle\r\n      let validatedString = solver.validate(puzzle);\r\n      //If validatedString is true the puzzle is worthy\r\n      if(validatedString != true){\r\n        //If not return the error\r\n        return res.json(validatedString);\r\n      }\r\n      //Solve puzzle\r\n      let solvedString = solver.solve(puzzle);\r\n      //If solvedString returns false\r\n      if(!solvedString){\r\n        return res.json({error: \"Puzzle cannot be solved\"});\r\n      } else {\r\n        //If solvedString returns a string\r\n        return res.json({solution: solvedString});\r\n      }\r\n    });\r\n};\r\n"
      ]
    },
    "sourceType": "script",
    "mtime": 1685771319552
  },
  "{\"sourceRoot\":\"C:\\\\Users\\\\ledlo\\\\OneDrive\\\\FreeCodeCamp\\\\QualityAssurance\\\\Projects\\\\SudokuSolver\\\\controllers\\\\\",\"caller\":{\"name\":\"@babel/register\"},\"cwd\":\"C:\\\\Users\\\\ledlo\\\\OneDrive\\\\FreeCodeCamp\\\\QualityAssurance\\\\Projects\\\\SudokuSolver\",\"filename\":\"C:\\\\Users\\\\ledlo\\\\OneDrive\\\\FreeCodeCamp\\\\QualityAssurance\\\\Projects\\\\SudokuSolver\\\\controllers\\\\sudoku-solver.js\",\"cloneInputAst\":true,\"babelrc\":false,\"configFile\":false,\"passPerPreset\":false,\"envName\":\"test\",\"root\":\"C:\\\\Users\\\\ledlo\\\\OneDrive\\\\FreeCodeCamp\\\\QualityAssurance\\\\Projects\\\\SudokuSolver\",\"plugins\":[{\"key\":\"proposal-numeric-separator\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"NumericLiteral\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-logical-assignment-operators\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"AssignmentExpression\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-nullish-coalescing-operator\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"LogicalExpression\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-optional-chaining\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"OptionalCallExpression\":{\"enter\":[null]},\"OptionalMemberExpression\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-json-strings\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"DirectiveLiteral\":{\"enter\":[null]},\"StringLiteral\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-optional-catch-binding\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"CatchClause\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-parameters\",\"visitor\":{\"_exploded\":true,\"_verified\":true,\"FunctionDeclaration\":{\"enter\":[null]},\"FunctionExpression\":{\"enter\":[null]},\"ObjectMethod\":{\"enter\":[null]},\"ArrowFunctionExpression\":{\"enter\":[null]},\"ClassMethod\":{\"enter\":[null]},\"ClassPrivateMethod\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-async-generator-functions\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"Program\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-object-rest-spread\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"VariableDeclarator\":{\"enter\":[null]},\"ExportNamedDeclaration\":{\"enter\":[null]},\"CatchClause\":{\"enter\":[null]},\"AssignmentExpression\":{\"enter\":[null]},\"ArrayPattern\":{\"enter\":[null]},\"ObjectExpression\":{\"enter\":[null]},\"FunctionDeclaration\":{\"enter\":[null]},\"FunctionExpression\":{\"enter\":[null]},\"ObjectMethod\":{\"enter\":[null]},\"ArrowFunctionExpression\":{\"enter\":[null]},\"ClassMethod\":{\"enter\":[null]},\"ClassPrivateMethod\":{\"enter\":[null]},\"ForInStatement\":{\"enter\":[null]},\"ForOfStatement\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-dotall-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-unicode-property-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-named-capturing-groups-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-async-to-generator\",\"visitor\":{\"_exploded\":true,\"_verified\":true,\"FunctionDeclaration\":{\"enter\":[null]},\"FunctionExpression\":{\"enter\":[null]},\"ObjectMethod\":{\"enter\":[null]},\"ArrowFunctionExpression\":{\"enter\":[null]},\"ClassMethod\":{\"enter\":[null]},\"ClassPrivateMethod\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-exponentiation-operator\",\"visitor\":{\"AssignmentExpression\":{\"enter\":[null]},\"BinaryExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-template-literals\",\"visitor\":{\"TaggedTemplateExpression\":{\"enter\":[null]},\"TemplateLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-literals\",\"visitor\":{\"NumericLiteral\":{\"enter\":[null]},\"StringLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-function-name\",\"visitor\":{\"FunctionExpression\":{\"exit\":[null]},\"ObjectProperty\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-arrow-functions\",\"visitor\":{\"ArrowFunctionExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-block-scoped-functions\",\"visitor\":{\"BlockStatement\":{\"enter\":[null]},\"SwitchCase\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-classes\",\"visitor\":{\"ExportDefaultDeclaration\":{\"enter\":[null]},\"ClassDeclaration\":{\"enter\":[null]},\"ClassExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-object-super\",\"visitor\":{\"ObjectExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-shorthand-properties\",\"visitor\":{\"ObjectMethod\":{\"enter\":[null]},\"ObjectProperty\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-duplicate-keys\",\"visitor\":{\"ObjectExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-computed-properties\",\"visitor\":{\"ObjectExpression\":{\"exit\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-for-of\",\"visitor\":{\"ForOfStatement\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-sticky-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-unicode-escapes\",\"visitor\":{\"Identifier\":{\"enter\":[null]},\"TemplateElement\":{\"enter\":[null]},\"_exploded\":true,\"StringLiteral\":{\"enter\":[null]},\"DirectiveLiteral\":{\"enter\":[null]},\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-unicode-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-spread\",\"visitor\":{\"ArrayExpression\":{\"enter\":[null]},\"CallExpression\":{\"enter\":[null]},\"NewExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-destructuring\",\"visitor\":{\"ExportNamedDeclaration\":{\"enter\":[null]},\"CatchClause\":{\"enter\":[null]},\"AssignmentExpression\":{\"enter\":[null]},\"VariableDeclaration\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true,\"ForInStatement\":{\"enter\":[null]},\"ForOfStatement\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-block-scoping\",\"visitor\":{\"VariableDeclaration\":{\"enter\":[null]},\"CatchClause\":{\"enter\":[null]},\"_exploded\":true,\"BlockStatement\":{\"enter\":[null]},\"SwitchStatement\":{\"enter\":[null]},\"Program\":{\"enter\":[null]},\"_verified\":true,\"DoWhileStatement\":{\"enter\":[null]},\"ForInStatement\":{\"enter\":[null]},\"ForStatement\":{\"enter\":[null]},\"WhileStatement\":{\"enter\":[null]},\"ForOfStatement\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-typeof-symbol\",\"visitor\":{\"UnaryExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true,\"BlockStatement\":{\"enter\":[null]},\"CatchClause\":{\"enter\":[null]},\"DoWhileStatement\":{\"enter\":[null]},\"ForInStatement\":{\"enter\":[null]},\"ForStatement\":{\"enter\":[null]},\"FunctionDeclaration\":{\"enter\":[null]},\"FunctionExpression\":{\"enter\":[null]},\"Program\":{\"enter\":[null]},\"ObjectMethod\":{\"enter\":[null]},\"SwitchStatement\":{\"enter\":[null]},\"WhileStatement\":{\"enter\":[null]},\"ArrowFunctionExpression\":{\"enter\":[null]},\"ClassExpression\":{\"enter\":[null]},\"ClassDeclaration\":{\"enter\":[null]},\"ForOfStatement\":{\"enter\":[null]},\"ClassMethod\":{\"enter\":[null]},\"ClassPrivateMethod\":{\"enter\":[null]},\"TSModuleBlock\":{\"enter\":[null]},\"AssignmentPattern\":{\"enter\":[null]},\"ArrayPattern\":{\"enter\":[null]},\"ObjectPattern\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-new-target\",\"visitor\":{\"MetaProperty\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"regenerator-transform\",\"visitor\":{\"_exploded\":true,\"_verified\":true,\"ObjectMethod\":{\"enter\":[null],\"exit\":[null]},\"ClassMethod\":{\"enter\":[null],\"exit\":[null]},\"ClassPrivateMethod\":{\"enter\":[null],\"exit\":[null]},\"FunctionDeclaration\":{\"exit\":[null]},\"FunctionExpression\":{\"exit\":[null]},\"ArrowFunctionExpression\":{\"exit\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-member-expression-literals\",\"visitor\":{\"MemberExpression\":{\"exit\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-property-literals\",\"visitor\":{\"ObjectProperty\":{\"exit\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-reserved-words\",\"visitor\":{\"_exploded\":true,\"_verified\":true,\"Identifier\":{\"enter\":[null,null]},\"JSXIdentifier\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-export-namespace-from\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"ExportNamedDeclaration\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-modules-commonjs\",\"visitor\":{\"CallExpression\":{\"enter\":[null]},\"Program\":{\"exit\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-dynamic-import\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"Program\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}}],\"presets\":[]}:7.11.6:test": {
    "metadata": {},
    "options": {
      "sourceRoot": "C:\\Users\\ledlo\\OneDrive\\FreeCodeCamp\\QualityAssurance\\Projects\\SudokuSolver\\controllers\\",
      "caller": {
        "name": "@babel/register"
      },
      "cwd": "C:\\Users\\ledlo\\OneDrive\\FreeCodeCamp\\QualityAssurance\\Projects\\SudokuSolver",
      "filename": "C:\\Users\\ledlo\\OneDrive\\FreeCodeCamp\\QualityAssurance\\Projects\\SudokuSolver\\controllers\\sudoku-solver.js",
      "cloneInputAst": true,
      "babelrc": false,
      "configFile": false,
      "envName": "test",
      "root": "C:\\Users\\ledlo\\OneDrive\\FreeCodeCamp\\QualityAssurance\\Projects\\SudokuSolver",
      "sourceMaps": "both",
      "ast": false,
      "passPerPreset": false,
      "plugins": [
        {
          "key": "proposal-numeric-separator",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "NumericLiteral": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-logical-assignment-operators",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "AssignmentExpression": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-nullish-coalescing-operator",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "LogicalExpression": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-optional-chaining",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "OptionalCallExpression": {
              "enter": [
                null
              ]
            },
            "OptionalMemberExpression": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-json-strings",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "DirectiveLiteral": {
              "enter": [
                null
              ]
            },
            "StringLiteral": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-optional-catch-binding",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "CatchClause": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-parameters",
          "visitor": {
            "_exploded": true,
            "_verified": true,
            "FunctionDeclaration": {
              "enter": [
                null
              ]
            },
            "FunctionExpression": {
              "enter": [
                null
              ]
            },
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "ClassMethod": {
              "enter": [
                null
              ]
            },
            "ClassPrivateMethod": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-async-generator-functions",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "Program": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-object-rest-spread",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "VariableDeclarator": {
              "enter": [
                null
              ]
            },
            "ExportNamedDeclaration": {
              "enter": [
                null
              ]
            },
            "CatchClause": {
              "enter": [
                null
              ]
            },
            "AssignmentExpression": {
              "enter": [
                null
              ]
            },
            "ArrayPattern": {
              "enter": [
                null
              ]
            },
            "ObjectExpression": {
              "enter": [
                null
              ]
            },
            "FunctionDeclaration": {
              "enter": [
                null
              ]
            },
            "FunctionExpression": {
              "enter": [
                null
              ]
            },
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "ClassMethod": {
              "enter": [
                null
              ]
            },
            "ClassPrivateMethod": {
              "enter": [
                null
              ]
            },
            "ForInStatement": {
              "enter": [
                null
              ]
            },
            "ForOfStatement": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-dotall-regex",
          "visitor": {
            "RegExpLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-unicode-property-regex",
          "visitor": {
            "RegExpLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-named-capturing-groups-regex",
          "visitor": {
            "RegExpLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-async-to-generator",
          "visitor": {
            "_exploded": true,
            "_verified": true,
            "FunctionDeclaration": {
              "enter": [
                null
              ]
            },
            "FunctionExpression": {
              "enter": [
                null
              ]
            },
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "ClassMethod": {
              "enter": [
                null
              ]
            },
            "ClassPrivateMethod": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-exponentiation-operator",
          "visitor": {
            "AssignmentExpression": {
              "enter": [
                null
              ]
            },
            "BinaryExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-template-literals",
          "visitor": {
            "TaggedTemplateExpression": {
              "enter": [
                null
              ]
            },
            "TemplateLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-literals",
          "visitor": {
            "NumericLiteral": {
              "enter": [
                null
              ]
            },
            "StringLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-function-name",
          "visitor": {
            "FunctionExpression": {
              "exit": [
                null
              ]
            },
            "ObjectProperty": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-arrow-functions",
          "visitor": {
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-block-scoped-functions",
          "visitor": {
            "BlockStatement": {
              "enter": [
                null
              ]
            },
            "SwitchCase": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-classes",
          "visitor": {
            "ExportDefaultDeclaration": {
              "enter": [
                null
              ]
            },
            "ClassDeclaration": {
              "enter": [
                null
              ]
            },
            "ClassExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-object-super",
          "visitor": {
            "ObjectExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-shorthand-properties",
          "visitor": {
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "ObjectProperty": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-duplicate-keys",
          "visitor": {
            "ObjectExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-computed-properties",
          "visitor": {
            "ObjectExpression": {
              "exit": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-for-of",
          "visitor": {
            "ForOfStatement": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-sticky-regex",
          "visitor": {
            "RegExpLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-unicode-escapes",
          "visitor": {
            "Identifier": {
              "enter": [
                null
              ]
            },
            "TemplateElement": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "StringLiteral": {
              "enter": [
                null
              ]
            },
            "DirectiveLiteral": {
              "enter": [
                null
              ]
            },
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-unicode-regex",
          "visitor": {
            "RegExpLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-spread",
          "visitor": {
            "ArrayExpression": {
              "enter": [
                null
              ]
            },
            "CallExpression": {
              "enter": [
                null
              ]
            },
            "NewExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-destructuring",
          "visitor": {
            "ExportNamedDeclaration": {
              "enter": [
                null
              ]
            },
            "CatchClause": {
              "enter": [
                null
              ]
            },
            "AssignmentExpression": {
              "enter": [
                null
              ]
            },
            "VariableDeclaration": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true,
            "ForInStatement": {
              "enter": [
                null
              ]
            },
            "ForOfStatement": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-block-scoping",
          "visitor": {
            "VariableDeclaration": {
              "enter": [
                null
              ]
            },
            "CatchClause": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "BlockStatement": {
              "enter": [
                null
              ]
            },
            "SwitchStatement": {
              "enter": [
                null
              ]
            },
            "Program": {
              "enter": [
                null
              ]
            },
            "_verified": true,
            "DoWhileStatement": {
              "enter": [
                null
              ]
            },
            "ForInStatement": {
              "enter": [
                null
              ]
            },
            "ForStatement": {
              "enter": [
                null
              ]
            },
            "WhileStatement": {
              "enter": [
                null
              ]
            },
            "ForOfStatement": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-typeof-symbol",
          "visitor": {
            "UnaryExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true,
            "BlockStatement": {
              "enter": [
                null
              ]
            },
            "CatchClause": {
              "enter": [
                null
              ]
            },
            "DoWhileStatement": {
              "enter": [
                null
              ]
            },
            "ForInStatement": {
              "enter": [
                null
              ]
            },
            "ForStatement": {
              "enter": [
                null
              ]
            },
            "FunctionDeclaration": {
              "enter": [
                null
              ]
            },
            "FunctionExpression": {
              "enter": [
                null
              ]
            },
            "Program": {
              "enter": [
                null
              ]
            },
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "SwitchStatement": {
              "enter": [
                null
              ]
            },
            "WhileStatement": {
              "enter": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "ClassExpression": {
              "enter": [
                null
              ]
            },
            "ClassDeclaration": {
              "enter": [
                null
              ]
            },
            "ForOfStatement": {
              "enter": [
                null
              ]
            },
            "ClassMethod": {
              "enter": [
                null
              ]
            },
            "ClassPrivateMethod": {
              "enter": [
                null
              ]
            },
            "TSModuleBlock": {
              "enter": [
                null
              ]
            },
            "AssignmentPattern": {
              "enter": [
                null
              ]
            },
            "ArrayPattern": {
              "enter": [
                null
              ]
            },
            "ObjectPattern": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-new-target",
          "visitor": {
            "MetaProperty": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "regenerator-transform",
          "visitor": {
            "_exploded": true,
            "_verified": true,
            "ObjectMethod": {
              "enter": [
                null
              ],
              "exit": [
                null
              ]
            },
            "ClassMethod": {
              "enter": [
                null
              ],
              "exit": [
                null
              ]
            },
            "ClassPrivateMethod": {
              "enter": [
                null
              ],
              "exit": [
                null
              ]
            },
            "FunctionDeclaration": {
              "exit": [
                null
              ]
            },
            "FunctionExpression": {
              "exit": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "exit": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-member-expression-literals",
          "visitor": {
            "MemberExpression": {
              "exit": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-property-literals",
          "visitor": {
            "ObjectProperty": {
              "exit": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-reserved-words",
          "visitor": {
            "_exploded": true,
            "_verified": true,
            "Identifier": {
              "enter": [
                null,
                null
              ]
            },
            "JSXIdentifier": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-export-namespace-from",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "ExportNamedDeclaration": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-modules-commonjs",
          "visitor": {
            "CallExpression": {
              "enter": [
                null
              ]
            },
            "Program": {
              "exit": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-dynamic-import",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "Program": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        }
      ],
      "presets": [],
      "parserOpts": {
        "sourceType": "module",
        "sourceFileName": "C:\\Users\\ledlo\\OneDrive\\FreeCodeCamp\\QualityAssurance\\Projects\\SudokuSolver\\controllers\\sudoku-solver.js",
        "plugins": [
          "numericSeparator",
          "logicalAssignment",
          "nullishCoalescingOperator",
          "optionalChaining",
          "jsonStrings",
          "optionalCatchBinding",
          "asyncGenerators",
          "objectRestSpread",
          "exportNamespaceFrom",
          "dynamicImport"
        ]
      },
      "generatorOpts": {
        "filename": "C:\\Users\\ledlo\\OneDrive\\FreeCodeCamp\\QualityAssurance\\Projects\\SudokuSolver\\controllers\\sudoku-solver.js",
        "comments": true,
        "compact": "auto",
        "sourceMaps": "both",
        "sourceRoot": "C:\\Users\\ledlo\\OneDrive\\FreeCodeCamp\\QualityAssurance\\Projects\\SudokuSolver\\controllers\\",
        "sourceFileName": "sudoku-solver.js"
      }
    },
    "ast": null,
    "code": "\"use strict\";\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\n//Constants\nvar _require = require(\"@babel/core\"),\n    transform = _require.transform;\n\nvar EMPTY = '.';\nvar possibleNumbers = ['1', '2', '3', '4', '5', '6', '7', '8', '9'];\nvar letterToNumber = {\n  'A': 0,\n  'B': 1,\n  'C': 2,\n  'D': 3,\n  'E': 4,\n  'F': 5,\n  'G': 6,\n  'H': 7,\n  'I': 8\n};\n\nvar SudokuSolver = /*#__PURE__*/function () {\n  function SudokuSolver() {\n    _classCallCheck(this, SudokuSolver);\n  }\n\n  _createClass(SudokuSolver, [{\n    key: \"puzzleToArray\",\n    value: function puzzleToArray(puzzleString) {\n      var valueIndex = 0;\n      var result = []; //Iterate valueIndex until reacj puzzleString.length\n\n      while (valueIndex != puzzleString.length) {\n        var row = []; //Insert 9 characters in row\n\n        for (var value = 0; value <= 8; value++) {\n          row.push(puzzleString[valueIndex]);\n          valueIndex++;\n        } //Insert row in result\n\n\n        result.push(row);\n      }\n\n      return result;\n    }\n  }, {\n    key: \"isValidToInsert\",\n    value: function isValidToInsert(number, row, col, board) {\n      //Check if number exists in row and col\n      for (var i = 0; i < board.length; i++) {\n        if (board[row][i] === number || board[i][col] === number) {\n          return false;\n        }\n      } //Check if number exists in 3x3 matrix\n\n\n      var startRow = Math.floor(row / 3) * 3;\n      var startColumn = Math.floor(col / 3) * 3;\n\n      for (var _i = startRow; _i < startRow + 3; _i++) {\n        for (var j = startColumn; j < startColumn + 3; j++) {\n          if (board[_i][j] === number) {\n            return false;\n          }\n        }\n      } //If number doesn't exists in any return true\n\n\n      return true;\n    }\n  }, {\n    key: \"getEmptySpaces\",\n    value: function getEmptySpaces(board) {\n      var emptySpaces = []; //Iterate through all cells\n\n      for (var i = 0; i < board.length; i++) {\n        for (var j = 0; j < board.length; j++) {\n          //If the value of a cell is EMPTY\n          if (board[i][j] === EMPTY) {\n            //Insert row and col position into emptySpaces array\n            emptySpaces.push({\n              row: i,\n              col: j\n            });\n          }\n        }\n      }\n\n      return emptySpaces;\n    }\n  }, {\n    key: \"getBoardAndCheckCell\",\n    value: function getBoardAndCheckCell(puzzleString, row, column, number) {\n      //Create Board\n      var board = this.puzzleToArray(puzzleString); //Check if Cell Value is Worthy\n\n      switch (board[row][column - 1]) {\n        //If value is EMPTY return false to be reviewed\n        case EMPTY:\n          return {\n            board: board,\n            result: false\n          };\n        //If value is the same as number return true and end process\n\n        case number:\n          return {\n            board: board,\n            result: true\n          };\n        //If value is not EMPTY and is different than value return null\n\n        default:\n          return {\n            board: board,\n            result: null\n          };\n      }\n    }\n  }, {\n    key: \"transformBack\",\n    value: function transformBack(board) {\n      //Flat array and join without separator\n      return board.flat().join(\"\");\n    }\n  }, {\n    key: \"validate\",\n    value: function validate(puzzleString) {\n      if (!puzzleString) {\n        return {\n          error: \"Required field missing\"\n        };\n      }\n\n      if (puzzleString.length != 81) {\n        return {\n          error: \"Expected puzzle to be 81 characters long\"\n        };\n      }\n\n      if (/[^0-9.]/g.test(puzzleString)) {\n        return {\n          error: \"Invalid characters in puzzle\"\n        };\n      }\n\n      return true;\n    }\n  }, {\n    key: \"checkRowPlacement\",\n    value: function checkRowPlacement(puzzleString, row, column, value) {\n      //Convert row letter to row number\n      row = letterToNumber[row.toUpperCase()]; //Get results from getBoardAndCheckCell\n\n      var _this$getBoardAndChec = this.getBoardAndCheckCell(puzzleString, row, column, value),\n          board = _this$getBoardAndChec.board,\n          result = _this$getBoardAndChec.result;\n\n      switch (result) {\n        //If result is true\n        case true:\n          //Return true as value to check is the same as the value from puzzle\n          return true;\n        //If result is false\n\n        case false:\n          //Check if value already exists in row\n          for (var i = 0; i < 9; i++) {\n            if (board[row][i] == value) {\n              return false;\n            }\n          } //If value does not exists in row return true\n\n\n          return true;\n        //If result is null\n\n        case null:\n          return false;\n      }\n    }\n  }, {\n    key: \"checkColPlacement\",\n    value: function checkColPlacement(puzzleString, row, column, value) {\n      //Same as checkRowPlacement\n      row = letterToNumber[row.toUpperCase()];\n\n      var _this$getBoardAndChec2 = this.getBoardAndCheckCell(puzzleString, row, column, value),\n          board = _this$getBoardAndChec2.board,\n          result = _this$getBoardAndChec2.result;\n\n      switch (result) {\n        case true:\n          return true;\n\n        case false:\n          for (var i = 0; i < 9; i++) {\n            //Instead of checking each column, check each row\n            if (board[i][column - 1] == value) {\n              return false;\n            }\n          }\n\n          return true;\n\n        case null:\n          return false;\n      }\n    }\n  }, {\n    key: \"checkRegionPlacement\",\n    value: function checkRegionPlacement(puzzleString, row, column, value) {\n      //Same as checkRowPlacement\n      row = letterToNumber[row.toUpperCase()];\n\n      var _this$getBoardAndChec3 = this.getBoardAndCheckCell(puzzleString, row, column, value),\n          board = _this$getBoardAndChec3.board,\n          result = _this$getBoardAndChec3.result;\n\n      switch (result) {\n        case true:\n          return true;\n\n        case false:\n          var startRow = Math.floor(row / 3) * 3;\n          var startColumn = Math.floor(column / 3) * 3; //Iterate through each cell in region\n\n          for (var i = startRow; i < startRow + 3; i++) {\n            for (var j = startColumn; j < startColumn + 3; j++) {\n              //If value exists in region return false\n              if (board[i][j] === value) {\n                return false;\n              }\n            }\n          } //If number doesn't exists return true\n\n\n          return true;\n\n        case null:\n          return false;\n      }\n    }\n  }, {\n    key: \"solve\",\n    value: function solve(puzzleString) {\n      var _this = this;\n\n      //Translate puzzleString into an Array\n      var board = this.puzzleToArray(puzzleString); //Get Empty Spaces\n\n      var emptySpaces = this.getEmptySpaces(board); //Try Numbers Function\n\n      var tryNumbers = function tryNumbers(emptySpaceIndex) {\n        //Function will be finished once emptySpaceIndex reach the total emptySpaces\n        if (emptySpaceIndex >= emptySpaces.length) {\n          return true;\n        } //Get row and col positions from emptySpaces array of objects\n\n\n        var _emptySpaces$emptySpa = emptySpaces[emptySpaceIndex],\n            row = _emptySpaces$emptySpa.row,\n            col = _emptySpaces$emptySpa.col; //Try to fill the empty spaces with any number from possibleNumbers\n\n        for (var i = 0; i < possibleNumbers.length; i++) {\n          //Use i as index from possibleNumbers Array\n          var number = possibleNumbers[i]; //Check if number is valid to insert\n\n          if (_this.isValidToInsert(number, row, col, board)) {\n            //If is valid insert number into board\n            board[row][col] = number; //Recurse to the next emptySpace to solve until all returns true\n\n            if (tryNumbers(emptySpaceIndex + 1)) {\n              //true will finish the recursion\n              return true;\n            } //If recurseNumbers return false reset board value to EMPTY to try again\n\n\n            board[row][col] = EMPTY;\n          }\n        } //If puzzle cannot be solved return false\n\n\n        return false;\n      }; //Start recursion from position 0 and check if returns true when solved or false when not solved\n\n\n      if (tryNumbers(0)) {\n        //Transform board back to string and return result\n        var result = this.transformBack(board);\n        return result;\n      } else {\n        //If tryNumbers returns false, puzzle cannot be solved\n        return false;\n      }\n    }\n  }]);\n\n  return SudokuSolver;\n}();\n\nmodule.exports = SudokuSolver;\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,",
    "map": {
      "version": 3,
      "sources": [
        "sudoku-solver.js"
      ],
      "names": [
        "require",
        "transform",
        "EMPTY",
        "possibleNumbers",
        "letterToNumber",
        "SudokuSolver",
        "puzzleString",
        "valueIndex",
        "result",
        "length",
        "row",
        "value",
        "push",
        "number",
        "col",
        "board",
        "i",
        "startRow",
        "Math",
        "floor",
        "startColumn",
        "j",
        "emptySpaces",
        "column",
        "puzzleToArray",
        "flat",
        "join",
        "error",
        "test",
        "toUpperCase",
        "getBoardAndCheckCell",
        "getEmptySpaces",
        "tryNumbers",
        "emptySpaceIndex",
        "isValidToInsert",
        "transformBack",
        "module",
        "exports"
      ],
      "mappings": "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",
      "sourceRoot": "C:\\Users\\ledlo\\OneDrive\\FreeCodeCamp\\QualityAssurance\\Projects\\SudokuSolver\\controllers\\",
      "sourcesContent": [
        "//Constants\r\nconst { transform } = require(\"@babel/core\");\r\nconst EMPTY  = '.';\r\nconst possibleNumbers = ['1', '2', '3', '4', '5', '6', '7', '8', '9'];\r\nconst letterToNumber = {\r\n  'A': 0,\r\n  'B': 1,\r\n  'C': 2,\r\n  'D': 3,\r\n  'E': 4,\r\n  'F': 5,\r\n  'G': 6,\r\n  'H': 7,\r\n  'I': 8\r\n}\r\n\r\nclass SudokuSolver {\r\n  \r\n  puzzleToArray(puzzleString) {\r\n    let valueIndex = 0;\r\n    let result = [];\r\n    //Iterate valueIndex until reacj puzzleString.length\r\n    while(valueIndex != puzzleString.length){\r\n      let row = [];\r\n      //Insert 9 characters in row\r\n      for(let value = 0; value <= 8; value++){\r\n          row.push(puzzleString[valueIndex]);\r\n          valueIndex++;\r\n      }\r\n      //Insert row in result\r\n      result.push(row);\r\n    }\r\n    return result;\r\n  }\r\n\r\n  isValidToInsert (number, row, col, board) {\r\n    //Check if number exists in row and col\r\n    for(let i = 0; i < board.length; i++){\r\n      if (board[row][i] === number || board[i][col] === number){\r\n        return false;\r\n      }\r\n    }\r\n    //Check if number exists in 3x3 matrix\r\n    let startRow = Math.floor(row / 3) * 3;\r\n    let startColumn = Math.floor(col / 3) * 3;\r\n\r\n    for(let i = startRow; i < startRow + 3; i++){\r\n      for(let j = startColumn; j < startColumn + 3; j++){\r\n        if (board[i][j] === number){\r\n          return false;\r\n        }\r\n      }\r\n    }\r\n    //If number doesn't exists in any return true\r\n    return true;\r\n  }\r\n\r\n  getEmptySpaces (board) {\r\n    let emptySpaces = [];\r\n    //Iterate through all cells\r\n    for (let i = 0; i < board.length; i++){\r\n      for(let j = 0; j < board.length; j++){\r\n        //If the value of a cell is EMPTY\r\n        if (board[i][j] === EMPTY){\r\n          //Insert row and col position into emptySpaces array\r\n          emptySpaces.push({row: i, col: j});\r\n        }\r\n      }\r\n    }\r\n    return emptySpaces;\r\n  }\r\n\r\n  getBoardAndCheckCell(puzzleString, row, column, number){\r\n    //Create Board\r\n    let board = this.puzzleToArray(puzzleString);\r\n    //Check if Cell Value is Worthy\r\n    switch(board[row][column-1]){\r\n      //If value is EMPTY return false to be reviewed\r\n      case EMPTY:\r\n        return {board, result: false};\r\n      //If value is the same as number return true and end process\r\n      case number:\r\n        return {board, result: true};\r\n      //If value is not EMPTY and is different than value return null\r\n      default:\r\n        return {board, result: null};\r\n    }\r\n  }\r\n\r\n  transformBack(board) {\r\n    //Flat array and join without separator\r\n    return board.flat().join(\"\");\r\n  }\r\n\r\n  validate(puzzleString) {\r\n    if(!puzzleString){\r\n      return {error: \"Required field missing\"};\r\n    }\r\n    if (puzzleString.length != 81){\r\n      return {error: \"Expected puzzle to be 81 characters long\"};\r\n    }\r\n    if (/[^0-9.]/g.test(puzzleString)){\r\n      return {error: \"Invalid characters in puzzle\"};\r\n    }\r\n    return true;\r\n  }\r\n\r\n  checkRowPlacement(puzzleString, row, column, value) {\r\n    //Convert row letter to row number\r\n    row = letterToNumber[row.toUpperCase()];\r\n    //Get results from getBoardAndCheckCell\r\n    let { board, result } = this.getBoardAndCheckCell(puzzleString, row, column, value);\r\n    switch (result){\r\n      //If result is true\r\n      case true:\r\n        //Return true as value to check is the same as the value from puzzle\r\n        return true;\r\n      //If result is false\r\n      case false:\r\n        //Check if value already exists in row\r\n        for(let i = 0; i < 9; i++){\r\n          if (board[row][i] == value){\r\n            return false;\r\n          }\r\n        }\r\n        //If value does not exists in row return true\r\n        return true;\r\n      //If result is null\r\n      case null:\r\n        return false;\r\n    }\r\n  }\r\n\r\n  checkColPlacement(puzzleString, row, column, value) {\r\n    //Same as checkRowPlacement\r\n    row = letterToNumber[row.toUpperCase()];\r\n    let { board, result } = this.getBoardAndCheckCell(puzzleString, row, column, value);\r\n    switch (result){\r\n      case true:\r\n        return true;\r\n      case false:\r\n        for(let i = 0; i < 9; i++){\r\n          //Instead of checking each column, check each row\r\n          if (board[i][column-1] == value){\r\n            return false;\r\n          }\r\n        }\r\n        return true;\r\n      case null:\r\n        return false;\r\n    }\r\n  }\r\n\r\n  checkRegionPlacement(puzzleString, row, column, value) {\r\n    //Same as checkRowPlacement\r\n    row = letterToNumber[row.toUpperCase()];\r\n    let { board, result } = this.getBoardAndCheckCell(puzzleString, row, column, value);\r\n    switch (result){\r\n      case true:\r\n        return true;\r\n      case false:\r\n        let startRow = Math.floor(row / 3) * 3;\r\n        let startColumn = Math.floor(column / 3) * 3;\r\n        //Iterate through each cell in region\r\n        for(let i = startRow; i < startRow + 3; i++){\r\n          for(let j = startColumn; j < startColumn + 3; j++){\r\n            //If value exists in region return false\r\n            if (board[i][j] === value){\r\n              return false;\r\n            }\r\n          }\r\n        }\r\n        //If number doesn't exists return true\r\n        return true;\r\n      case null:\r\n        return false;\r\n    }\r\n\r\n    \r\n  }\r\n\r\n  solve(puzzleString) {\r\n    //Translate puzzleString into an Array\r\n    let board = this.puzzleToArray(puzzleString);\r\n    //Get Empty Spaces\r\n    let emptySpaces = this.getEmptySpaces(board);\r\n    //Try Numbers Function\r\n    const tryNumbers = (emptySpaceIndex) => {\r\n      //Function will be finished once emptySpaceIndex reach the total emptySpaces\r\n      if (emptySpaceIndex >= emptySpaces.length){\r\n        return true;\r\n      }\r\n      //Get row and col positions from emptySpaces array of objects\r\n      const {row, col} = emptySpaces[emptySpaceIndex];\r\n      //Try to fill the empty spaces with any number from possibleNumbers\r\n      for(let i = 0; i < possibleNumbers.length; i++){\r\n        //Use i as index from possibleNumbers Array\r\n        let number = possibleNumbers[i];\r\n        //Check if number is valid to insert\r\n        if(this.isValidToInsert(number, row, col, board)){\r\n          //If is valid insert number into board\r\n          board[row][col] = number;\r\n          //Recurse to the next emptySpace to solve until all returns true\r\n          if(tryNumbers(emptySpaceIndex + 1)){\r\n            //true will finish the recursion\r\n            return true;\r\n          }\r\n          //If recurseNumbers return false reset board value to EMPTY to try again\r\n          board[row][col] = EMPTY;\r\n        }\r\n      }\r\n      //If puzzle cannot be solved return false\r\n      return false;\r\n    }\r\n    //Start recursion from position 0 and check if returns true when solved or false when not solved\r\n    if(tryNumbers(0)){\r\n    //Transform board back to string and return result\r\n    let result = this.transformBack(board);\r\n    return result;\r\n    } else {\r\n      //If tryNumbers returns false, puzzle cannot be solved\r\n      return false;\r\n    }\r\n  }\r\n}\r\n\r\nmodule.exports = SudokuSolver;\r\n\r\n"
      ]
    },
    "sourceType": "script",
    "mtime": 1685771476380
  }
}